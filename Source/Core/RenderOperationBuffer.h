#pragma once

#include "..\Common.h"
#include <vector>

namespace Apoc3D
{
	namespace Core
	{
		typedef std::vector<RenderOperation> OpList;
		/*
		  A buffer to store list of RenderOperation.
		  RenderOperation generated by Renderable objects 
		  should be add into this buffer before passing to the rendering engine.
		*/
		class _Export RenderOperationBuffer
		{
		private:
			OpList m_oplist;
			int m_internalPointer;
		public:
			RenderOperationBuffer(void)
			{

			}
			~RenderOperationBuffer(void)
			{

			}
			/* Adds a new RenderOperation to the buffer
			*/
			void RenderOperationBuffer::Add(const RenderOperation& op);
			/* Adds some new RenderOperation to the buffer
			*/
			void RenderOperationBuffer::Add(const RenderOperation* op, int count);
			void Clear();
			
			void FastClear()
			{
				m_internalPointer = 0;
			}
			const RenderOperation& get(int i)
			{
				return m_oplist[i];
			}

			int getCount(){ return m_internalPointer; }
		};

	}
}